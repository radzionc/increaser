input UpdateProjectInput {
  id: ID!
  name: String
  color: Int
  status: ProjectStatus
  emoji: String
  allocatedMinutesPerWeek: Float
}

input DeleteProjectInput {
  id: ID!
}

input SendAuthLinkByEmailInput {
  email: String!
}

input RedeemAppSumoCodeInput {
  code: String!
}

enum OAuthProvider {
  google
  facebook
}

type Habit {
  id: ID!
  name: String!
  emoji: String!
  color: Int!
  order: Float!
  startedAt: Float!
  successes: [String!]!
}

type AuthSession {
  token: String!
  expiresAt: Float!
  isFirst: Boolean
}

input AuthSessionWithOAuthInput {
  provider: OAuthProvider!
  code: String!
  redirectUri: String!
  timeZone: Int!
}

input AuthSessionWithEmailInput {
  code: String!
  timeZone: Int!
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

type ProjectWeek {
  year: Int!
  week: Int!
  seconds: Float!
}

type ProjectMonth {
  year: Int!
  month: Int!
  seconds: Float!
}

type Project {
  id: ID!
  name: String!
  emoji: String!
  color: Int!
  status: ProjectStatus!
  total: Float!
  allocatedMinutesPerWeek: Float!
  weeks: [ProjectWeek!]!
  months: [ProjectMonth!]!
}

type AppStats {
  registeredUsersNumber: Int!
}

input CreateHabitInput {
  id: String
  name: String!
  color: Int!
  emoji: String!
  order: Float
  startedAt: Float
}

input CreateProjectInput {
  id: String
  name: String!
  color: Int!
  emoji: String!
  allocatedMinutesPerWeek: Float!
}

input DeleteHabitInput {
  id: ID!
}

input UpdateHabitInput {
  id: ID!
  name: String
  color: Int
  order: Float
  emoji: String
  startedAt: Float
  successes: [String]
}

input TrackHabitInput {
  id: ID!
  date: String!
  value: Boolean!
}

input SetInput {
  start: Float!
  end: Float!
  projectId: ID!
}

type Set {
  start: Float!
  end: Float!
  projectId: ID!
}

type FocusSound {
  name: String!
  url: String!
  favourite: Boolean
}

type Task {
  startedAt: Float!
  name: String!
  id: String!
  isCompleted: Boolean!
}

enum PrimaryGoal {
  workMore
  workLess
  awareness
}

enum SubscriptionProvider {
  paddleClassic
}

enum SubscriptionBillingCycle {
  month
  year
}

enum SubscriptionStatus {
  active
  pastDue
}

type Subscription {
  provider: SubscriptionProvider!
  id: String!
  planId: String!
  status: SubscriptionStatus!
  nextBilledAt: Float
  endsAt: Float
}

enum LifeTimeDealProvider {
  appsumo
}

type LifeTimeDeal {
  provider: LifeTimeDealProvider
}

type UserState {
  sets: [Set!]!
  prevSets: [Set!]!
  projects: [Project!]!
  id: ID!
  isAnonymous: Boolean!
  email: String!
  name: String
  registrationDate: Float!
  freeTrialEnd: Float!
  weekTimeAllocation: [Float!]!
  goalToStartWorkAt: Float!
  goalToFinishWorkBy: Float!
  goalToGoToBedAt: Float!
  habits: [Habit!]!
  primaryGoal: PrimaryGoal!
  focusSounds: [FocusSound!]!
  tasks: [Task!]!
  country: String
  sumbittedHabitsAt: Float
  subscription: Subscription
  lifeTimeDeal: LifeTimeDeal
}

type ManageSubscription {
  updateUrl: String!
  cancelUrl: String!
}

input UserStateInput {
  timeZone: Int!
}

input FocusSoundInput {
  name: String!
  url: String!
  favourite: Boolean
}

input TaskInput {
  startedAt: Float!
  name: String!
  id: String!
  isCompleted: Boolean!
}

input UpdateUserInput {
  name: String
  country: String
  primaryGoal: PrimaryGoal
  focusSounds: [FocusSoundInput!]
  tasks: [TaskInput!]
  weekTimeAllocation: [Float!]
  goalToStartWorkAt: Float
  goalToFinishWorkBy: Float
  goalToGoToBedAt: Float
  isAnonymous: Boolean
  sumbittedHabitsAt: Float
}

input SubscriptionInput {
  id: String!
}

input ScoreboardInput {
  id: String!
}

type UserProfile {
  name: String
  country: String
}

type UserPerformanceRecord {
  dailyAvgInMinutes: Float!
  avgBlockInMinutes: Float!
  profile: UserProfile
}

type Scoreboard {
  id: String!
  myPosition: Int
  syncedAt: Float!
  users: [UserPerformanceRecord!]!
}

type Query {
  projects: [Project!]!
  authSessionWithEmail(input: AuthSessionWithEmailInput!): AuthSession!
  authSessionWithOAuth(input: AuthSessionWithOAuthInput!): AuthSession!
  userState(input: UserStateInput!): UserState!
  appStats: AppStats!
  manageSubscription: ManageSubscription!
  subscription(input: SubscriptionInput!): Subscription
  scoreboard(input: ScoreboardInput!): Scoreboard!
}

type Mutation {
  sendAuthLinkByEmail(input: SendAuthLinkByEmailInput!): Boolean

  updateProject(input: UpdateProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): Boolean

  redeemAppSumoCode(input: RedeemAppSumoCodeInput!): Boolean

  createHabit(input: CreateHabitInput!): Habit
  createProject(input: CreateProjectInput!): Project
  deleteHabit(input: DeleteHabitInput!): Boolean
  trackHabit(input: TrackHabitInput!): Boolean
  updateHabit(input: UpdateHabitInput!): Habit
  addSet(set: SetInput!): Boolean
  editLastSet(set: SetInput!): Boolean
  removeLastSet: Boolean
  updateUser(input: UpdateUserInput!): Boolean
}
